/*
*	MicroOpal - compiler for a very simple opal slang written in opal
*	Copyright (C) 2005/2006 Jan Kechel
*
*	This program is free software; you can redistribute it and/or
*	modify it under the terms of the GNU General Public License
*	as published by the Free Software Foundation; either version 2
*	of the License, or (at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License
*	along with this program; if not, write to the Free Software
*	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*
*
*	the interpreter
*
*	to test this interpreter with oasys try:
*
*	#oasys
*	>f Interpreter.impl
*	Interpreter.impl>e intertest("fac")
*
*	Where fac ist the basename of a sourcefile ending with .mo (in this example: fac.mo)
*
*	Steps:
*	1. create base-environment with reserved words
*	2. parse 1st level of all DEFs in Absy, and add function-names to environment
*   3. evaluate MAIN
*/

IMPLEMENTATION Interpreter

IMPORT	Diag		COMPLETELY
	Pos		COMPLETELY
	Nat COMPLETELY
	Bool ONLY not
	NatConv		ONLY `
	BoolConv	ONLY `
	Scanner COMPLETELY
	Parser COMPLETELY
	Checker COMPLETELY
	Options COMPLETELY
	Diag COMPLETELY
	Absy COMPLETELY
	Denotation COMPLETELY


DATA value == 
	undefined (reason : diag)
	number    (value  : nat)
	boolean  (value  : bool)

DEF `(undefined(Why)) == `(Why)
DEF `(number(Val))    == `(Val)
DEF `(boolean(Val))   == `(Val)

FUN ` : seq[string] -> denotation
DEF `(s:seq[string]) == 
	IF <>?(s) THEN
		""
	ELSE
		`(ft(s)) ++ `(rt(s))
	FI

-- um absy-knoten und variablennamen erweiterte environment
DATA eenv == 
	eenv(name:string, type:type, returns:datatype, pars:seq[datatype], parnames:seq[eenv], absy:absy) 


DEF interpret(Opts, Absy) ==
	LET
		env == getAllFunctions(Absy)
		(b, main) == isIdInEEnvironment("MAIN"!, env) -- returns MAIN-Function
	IN
		eval(absy(main), main, <>, env)

-- just to test the checker from oasys
DEF intertest(s) ==
		LET 
			pr == parse(options(false, false, false, s), scantest(s))
		IN
			IF success?(pr) THEN
				LET
					cr == check(options(false, false, false, s), absy(pr))
				IN
					IF success?(cr) THEN
						-- ok, now we can interpret ;-)
						printEEnv(getAllFunctions(absy(pr))) ++
						"Result: "  ++ `(interpret(options(false, false, false, s), absy(pr))) 
					ELSE
						`(undefined(reasons(cr)))
					FI
			ELSE
				`(undefined(reasons(pr)))
			FI

-- Parameter: aktuelle-funktion, aktuelle-environment, aktuelle-parameter-werte, gesamt-environment
-- returns: value
FUN eval : absy ** eenv ** seq[value] ** seq[eenv]-> value

DEF eval(ExprTerm(t, toks), e, params, g) == 
		IF t = ("true"!) THEN
			boolean(true)
		ELSE
			IF t = ("false"!) THEN
				boolean(false) 
			ELSE
				number( (`(t))!)
			FI
		FI

DEF eval(ExprFunc(n, p, toks), e, params, g) == 
	LET
		vals == getAllParameterValues(p, e, params, g)
		(b, fun) == isIdInEEnvironment(n, g)
	IN
		IF b THEN
			eval(absy(fun), fun, vals, g)
		ELSE
			exec(n, vals)
		FI
				

-- goes through Params and puts all values on a stack
-- params: absy of param, current function, current params, total environment
-- returns: seq[value]
FUN getAllParameterValues : absy ** eenv ** seq[value] ** seq[eenv] -> seq[value]
DEF getAllParameterValues(Params(ft, rt, toks), e, v, g) ==
	IF Empty?(ft) THEN
		<>
	ELSE
		LET
			v1 == eval(ft, e, v, g)
		IN
			IF Empty?(rt) THEN
				::(v1, <>)
			ELSE
				LET
					vs == getAllParameterValues(rt, e, v, g)
				IN
					::(v1, vs)
			FI
	FI
			

DEF eval(ExprId(n, toks), e, params, g) ==
	IF n = name(ft(parnames(e))) THEN
		ft(params)
	ELSE
		eval(ExprId(n, toks), eenv(name(e), type(e), returns(e), rt(pars(e)), rt(parnames(e)), absy(e)), rt(params), g)
	FI


DEF eval(ExprCond(if, then, else, toks), e, params, g) ==
	IF value(eval(if, e, params, g)) THEN
		eval(then, e, params, g)
	ELSE
		eval(else, e, params, g)
	FI

DEF eval(_,_,_,_) == 
		undefined(error(global, "Error: eval(_,_,_) got called.. "))


FUN exec : string ** seq[value] -> value
DEF exec(fktname, params) ==
	IF 
		fktname = ("add"!) THEN number(value(ft(params)) + value(ft(rt(params)))) ELSE IF 
		fktname = ("mul"!) THEN number(value(ft(params)) * value(ft(rt(params)))) ELSE IF 
		fktname = ("sub"!) THEN number(value(ft(params)) - value(ft(rt(params)))) ELSE IF 
		fktname = ("div"!) THEN number(value(ft(params)) / value(ft(rt(params)))) ELSE IF 
		fktname = ("eq"!) THEN boolean(value(ft(params))  ='Nat:nat**nat->bool value(ft(rt(params)))) ELSE IF 
		fktname = ("lt"!) THEN boolean(value(ft(params)) < value(ft(rt(params)))) ELSE IF 
		fktname = ("and"!) THEN boolean(value(ft(params)) and value(ft(rt(params)))) ELSE IF 
		fktname = ("or"!) THEN boolean(value(ft(params)) or value(ft(rt(params)))) ELSE IF 
		fktname = ("not"!) THEN boolean(not(value(ft(params)))) ELSE
		undefined(error(global, "MUST NEVER HAPPEN .."))
	FI FI FI FI FI FI FI FI FI


-- getBaseEnv importet from Checker.sign
FUN getAllFunctions : absy -> seq[eenv]
DEF getAllFunctions(a) == 
	LET
		(dtt1, ad1) == get(a, <>)
	IN
		ad1 -- Absy always starts with type Prog

-- get Environment
FUN get : absy ** seq[eenv] -> datatype ** seq[eenv]

-- Prog Knoten checken
DEF get(Prog(ftt,rtt), e) ==
	LET
		(dtt1, ad1) == get(ftt, e)
		(dtt2, ad2) == get(rtt, e)
	IN
			(unknown, (ad1 ++ ad2))

-- Def Knoten checken
DEF get(Def(fd, fi, toks), e) ==
	LET
		(dtt1, ad1) == get(fd, e) -- nur deklaration parsen, rest ist egal fuer env
		-- danach FuncImpl-Knoten in Absy-eenv speichern!
		newfunc == eenv(name(ft(ad1)), type(ft(ad1)), returns(ft(ad1)), pars(ft(ad1)), parnames(ft(ad1)), fi)
	IN
		(dtt1, ::(newfunc, <>)) -- je DEF-Knoten nur ein Eintrag!

-- FuncDecl Knoten checken, Environment durch Parameter erweitern
DEF get(FuncDecl(n, t, p, toks), e) ==
	LET 
		(dtt1, ad1) == get(t, e)
	IN
			IF SingleArg?(p) THEN -- falls nur ein parameter, dann hat der absy keinen ParamsDecl-Knoten
				LET
					(dtt2, ad2) == get(p, e)
					newfunc == eenv(n, func, dtt1, ::(dtt2, <>), ad2, FuncDecl(n, t, p, toks))  -- neue funktion bauen
				IN
					(dtt1, ::(newfunc, ad2))
			ELSE
				IF Empty?(p) THEN -- falls gar kein parameter (z.B. MAIN)
					LET
						newfunc == eenv(n, func, dtt1, <>, <>, FuncDecl(n, t, p, toks))
					IN
						(dtt1, ::(newfunc, <>))
				ELSE -- ok, viele parameter (>1)
					LET
						newfunc == eenv(n, func, dtt1, <>, <>, FuncDecl(n, t, p, toks))  -- neue funktion bauen
						(dtt2, ad2) == get(p, ::(newfunc, e))
					IN
						(dtt1, ad2) -- ok
				FI
			FI

DEF get(Type(n, toks), e) ==
	IF n = ("nat"!) THEN
		(number, <>)
	ELSE
		(boolean, <>)
	FI

DEF get(SingleArg(n, t, toks), e) ==
	LET 
		(dtt1, _) == get(t, e)
	IN
		LET
			newsort == eenv(n, sort, dtt1, <>, <>, SingleArg(n, t, toks))
		IN
			(dtt1, ::(newsort, <>))  -- neue sort zurueckgeben

-- erwartet aktuelle funktion als erstes element in env, oder letztes argument
DEF get(ParamsDecl(p1, p2, toks), e) ==
	LET
		(dtt2, ad2) == get(p2,  e)
	IN
		LET
			(dtt1, ad1) == get(p1, ad2 ++ e) 
		IN
			IF sort?(type(ft(ad2))) THEN
				LET
					-- append this arg as new param
					newfunc == eenv(name(ft(e)), type(ft(e)), returns(ft(e)), ::(dtt1, ::(dtt2, <>)), parnames(ft(e)) ++ ad1 ++ ad2, ParamsDecl(p1, p2, toks)) 
				IN
					(unknown, ::(newfunc, ad1 ++ ad2))
			ELSE
				LET
					-- append this arg as new param
					newfunc == eenv(name(ft(e)), type(ft(e)), returns(ft(e)), ::(dtt1, pars(ft(ad2))), parnames(ft(e)) ++ ad1 ++ rt(ad2), ParamsDecl(p1, p2, toks))
				IN
					(unknown, ::(newfunc,  ad1 ++ rt(ad2)))
			FI

DEF get(_,_) == (unknown, <>)

FUN ` : eenv -> denotation

DEF `(eenv(n, func, r, p, pn, a)) == 
	"\nfunc: " ++ `(n) ++ "(" ++ pEEnv(pn) ++ "):" ++ `(r)

DEF `(eenv(n, sort, r, p, pn, a)) == 
	`(n) ++ ":" ++ `(r) 

FUN printEEnv : seq[eenv] -> denotation
DEF printEEnv(s) ==
	IF <>?(s) THEN
		""
	ELSE
		"\n----------------------------\n" ++
		"Currently known Functions:\n" ++ 
		pEEnv(s) ++ 
		"\n----------------------------\n"
	FI

FUN pEEnv : seq[eenv] -> denotation
DEF pEEnv(s) ==
	IF <>?(s) THEN
		""
	ELSE
		IF <>?(rt(s)) THEN
			`(ft(s))
		ELSE
			IF sort?(type(ft(s))) THEN
				`(ft(s)) ++ ", " ++ pEEnv(rt(s))
			ELSE
				`(ft(s)) ++ pEEnv(rt(s))
			FI
		FI
	FI

-- returns true if the id is in this eenvironment
FUN isIdInEEnvironment : string ** seq[eenv] -> bool ** eenv
DEF isIdInEEnvironment(id, e) ==
	IF <>?(e) THEN
		(false, eenv("error"!, func, unknown, <>, <>, Error("x"!, <>)))
	ELSE
		IF name(ft(e)) = id THEN
			(true, ft(e)) 
		ELSE
			isIdInEEnvironment(id , rt(e))
		FI
	FI



-- THE LAST LINE
