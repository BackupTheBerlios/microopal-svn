/*
*	MicroOpal - compiler for a very simple opal slang written in opal
*	Copyright (C) 2005 Jan Kechel, Marc Schachtel
*
*	This program is free software; you can redistribute it and/or
*	modify it under the terms of the GNU General Public License
*	as published by the Free Software Foundation; either version 2
*	of the License, or (at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License
*	along with this program; if not, write to the Free Software
*	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*
*
*	the parser
*
*	to test this parser with oasys try:
*
*	#oasys
*	>f Parser.impl
*	Parser.impl>e parsetest("fac")
*
*	Where fac ist the basename of a sourcefile ending with .mo (in this example: fac.mo)
*/


IMPLEMENTATION Parser

IMPORT	Diag COMPLETELY
	Pos COMPLETELY
	Scanner ONLY scantest
	Options COMPLETELY
	Absy COMPLETELY
	Seq COMPLETELY
	SeqConv COMPLETELY
	SeqIndex COMPLETELY
	Nat COMPLETELY
	NatConv COMPLETELY
	String COMPLETELY
	Token COMPLETELY

DATA parseResult == 
	success(absy: absy)
	failure(reasons: diag)

DEF parse(Opts, Toks) ==
	LET
		(a, t) == parseProg(Toks)
	IN
		success(a)

-- parseProg: Erstellt einen neuen Prog-Knoten im Absy und 
--            laesst Def-Knoten von parseDef erstellen
--
--      Prog
--     /    \
--   Def   Prog
--
FUN parseProg : seq[token] -> absy ** seq[token]
DEF parseProg(Toks) ==
	IF <>?(Toks) THEN
		(Error("parseProg: EOF"!), <>)
	ELSE
		LET
			(a, rest) == parseDef(Toks)
		IN
			IF <>?(rest) or kEOF?(ft(rest)) THEN
				(Prog(a, Empty(""!)), <>) -- letztes DEF
			ELSE
				LET
					(b, prest) == parseProg(rest)
				IN
					(Prog(a, b), prest) -- noch einen Prog-Knoten bitte
		FI
	FI

-- parseDef: Erstellt einen neuen Def-Knoten mit FuncDecl und Expr
--
-- Direktormenge: DEF
--
--         DEF
--        /   \
-- FuncDecl   ExprXXX
--
FUN parseDef : seq[token] -> absy ** seq[token]
DEF parseDef(Toks) ==
	IF <>?(Toks) or kEOF?(ft(Toks)) THEN
		(Error("parseDef: unexpected EOF"!), Toks)
	ELSE
		IF kDEF?(ft(Toks)) THEN -- Directormenge DEF
			LET
				(funcdecl, rest) == parseFuncDecl(rt(Toks))
				(funcimpl, brest) == parseFuncImpl(rest)
			IN
				(Def(funcdecl, funcimpl), brest)
		ELSE
			(Error(("parseDef: 'DEF' expected"!) ++ insteadOf(ft(Toks))), skipTo(kDEF?, Toks))
		FI
	FI

-- parseFuncDecl: Erstellt einen neuen FuncDecl-Knoten
--
-- Directormenge: ide
--
FUN parseFuncDecl : seq[token] -> absy ** seq[token]
DEF parseFuncDecl(Toks) ==
	IF id?(ft(Toks)) or kMAIN?(ft(Toks)) THEN
		IF id?(ft(Toks)) THEN	
			LET
				(absy_args, rest) == parseParamsDecl(rt(Toks))
			IN
				IF kCOLON?(ft(rest)) THEN
					LET
						(absy_type, brest) == parseType(rt(rest))
					IN
							(FuncDecl(value(ft(Toks))!, absy_type, absy_args), brest)
				ELSE
					(Error(("parseFuncDecl: ':' expected"!) ++ insteadOf(ft(rest))), rest)
				FI
		ELSE -- MAIN
			IF kCOLON?(ft(rt(Toks))) THEN -- eigentlich genau das gleiche wie 5 zeilen hoeher .. 
			                              -- -> sollte in eine eigene funktion
				LET
					(absy_type, rest) == parseType(rt(rt(Toks)))
				IN
					(FuncDecl("MAIN"!, absy_type, Empty(""!)), rest)
			ELSE
				(Error(("parseFuncDecl: ':' expected"!) ++ insteadOf(ft(rt(Toks)))), rt(Toks))
			FI
		FI
	ELSE
		(Error(("parseFuncDecl: identifier or MAIN expected"!) ++ insteadOf(ft(Toks))), rt(skipTo(kDEFAS?,Toks)))
	FI

-- parseFuncImpl: parst '==' und ruft parseExpression auf
FUN parseFuncImpl : seq[token] -> absy ** seq[token]
DEF parseFuncImpl(Toks) == 
	IF kDEFAS?(ft(Toks)) THEN -- faengt immer mit '==' an
		parseExpression(rt(Toks))
			ELSE
		(Error(("parseFuncImpl: '==' expected "!) ++ insteadOf(ft(Toks))), skipTo(kDEF?, Toks))
	FI

-- parseExpression: parst jede Expression
FUN parseExpression : seq[token] -> absy ** seq[token]
DEF parseExpression(Toks) ==
		IF kfalse?(ft(Toks)) or ktrue?(ft(Toks)) THEN -- erste moeglichkeit: true oder false
			IF kfalse?(ft(Toks)) THEN
				(ExprTerm("false"!), rt(Toks))
			ELSE
				(ExprTerm("true"!), rt(Toks))
			FI
		ELSE
			IF number?(ft(Toks)) THEN -- zweite moeglichkeit: zahl
				(ExprTerm((`(value(ft(Toks))))!), rt(Toks))
			ELSE
				IF id?(ft(Toks)) THEN -- dritte moeglichkeit: funktions-aufruf
					parseFuncCall(Toks)
				ELSE
					IF kIF?(ft(Toks)) THEN -- vierte moeglichkeit: conditional (if then else)
						parseConditional(Toks)
					ELSE
						-- keine der vier moeglichkeiten trifft zu ..
						(Error(("parseExpression: 'true', 'false', number, function, or IF expected "!) ++ insteadOf(ft(Toks))), skipTo(kDEF?, Toks))
					FI
				FI
			FI
		FI

-- parseFuncCall: parst einen Funktionsaufruf oder eine ID
FUN parseFuncCall : seq[token] -> absy ** seq[token]
DEF parseFuncCall(Toks) ==
	IF id?(ft(Toks)) THEN
		IF kOPEN?(ft(rt(Toks))) THEN
			LET
				(absy_args, rest) == parseIdArgs(rt(Toks)) -- id entfernen
			IN
				(ExprFunc((value(ft(Toks)))!, absy_args), rest) 
		ELSE
			(ExprId((value(ft(Toks)))!), rt(Toks))
		FI
	ELSE
		(Error(("parseFuncCall: id expected"!) ++ insteadOf(ft(Toks))), skipTo(kDEF?, Toks))
	FI

-- parseIdArgs: parst Argumentliste fuer FunctionCall
FUN parseIdArgs : seq[token] -> absy ** seq[token]
DEF parseIdArgs(Toks) ==
	IF kOPEN?(ft(Toks)) THEN
		LET
			(absy_expr, rest) == parseExpression(rt(Toks)) -- erstes Argument
			(absy_exprlist, rest2) == parseExpressionList(rest) -- rest
		IN
			IF kCLOSE?(ft(rest2)) THEN
				(Params(absy_expr, absy_exprlist), rt(rest2))
			ELSE
				(Error(("parseIdArgs: ')' expected"!) ++ insteadOf(ft(Toks))), skipTo(kDEF?, Toks))
			FI
	ELSE
		(Error(("parseIdArgs: '(' expected"!) ++ insteadOf(ft(Toks))), skipTo(kCLOSE?, Toks))
	FI

-- parseExpressionList: parst ', Expr [, Expr ]'
FUN parseExpressionList : seq[token] -> absy ** seq[token]
DEF parseExpressionList(Toks) ==
	IF kCLOSE?(ft(Toks)) THEN -- empty fall
		(Empty(""!), Toks)
	ELSE
		IF kCOMMA?(ft(Toks)) THEN
			LET
				(absy_expr, rest) == parseExpression(rt(Toks))
			IN
				IF kCOMMA?(ft(rest)) THEN
					LET
						(absy_params, rest2) == parseExpressionList(rest)
					IN
						(Params(absy_expr, absy_params), rest2)
				ELSE
					IF kCLOSE?(ft(rest)) THEN
						(Params(absy_expr, Empty(""!)), rest)
					ELSE
						(Error(("parseExpressionList: ')' expected"!) ++ insteadOf(ft(Toks))), skipTo(kCLOSE?, Toks))
					FI
				FI
		ELSE
			(Error(("parseExpressionList: ',' expected"!) ++ insteadOf(ft(Toks))), skipTo(kCLOSE?, Toks))
		FI
	FI

-- parseConditional: parst IF THEN ELSE
FUN parseConditional : seq[token] -> absy ** seq[token]
DEF parseConditional(Toks) ==
	IF kIF?(ft(Toks)) THEN
		LET
			(absy_if, rest) == parseExpression(rt(Toks))
		IN
			IF kTHEN?(ft(rest)) THEN
				LET
					(absy_then, restb) == parseExpression(rt(rest))
				IN
					IF kELSE?(ft(restb)) THEN
						-- ok, with else
						LET
							(absy_else, restc) == parseExpression(rt(restb))
						IN
							(ExprCond(absy_if, absy_then, absy_else), rt(restc)) -- skip FI
					ELSE
						-- ok, no else
							(ExprCond(absy_if, absy_then, Empty(""!)), rt(restb)) -- skip FI
					FI
			ELSE
				(Error(("parseConditional: THEN expected"!) ++ insteadOf(ft(Toks))), skipTo(kDEF?, Toks))
			FI
	ELSE
		(Error(("parseConditional: IF expected"!) ++ insteadOf(ft(Toks))), skipTo(kDEF?, Toks))
	FI

-- parseParamsDecl
FUN parseParamsDecl : seq[token] -> absy ** seq[token]
DEF parseParamsDecl(Toks) ==
	IF kOPEN?(ft(Toks)) THEN
		IF id?(ft(rt(Toks))) THEN
			LET
				(absy_single, rest) == parseSingleArg(rt(Toks))
			IN
				IF kCOMMA?(ft(rest)) THEN
					LET
						(absy_list, lrest) == parseArgList(absy_single,rt(Toks))
					IN
						(absy_list,rt(skipTo(kCLOSE?, Toks)))
				ELSE
					(absy_single, rt(skipTo(kCLOSE?, Toks)))
				FI
		ELSE
			IF kCLOSE?(ft(rt(Toks))) THEN
				(Empty(""!), rt(skipTo(kCLOSE?, Toks)))
			ELSE
				(Error("parseParamsDecl: ')' or identifier expected"!), rt(skipTo(kCLOSE?, Toks)))
			FI
		FI
	ELSE
		(Error(("parseParamsDecl: '(' expected"!) ++ insteadOf(ft(Toks))), Toks)
	FI

-- parseSingleArg
FUN parseSingleArg : seq[token] -> absy ** seq[token]
DEF parseSingleArg(Toks) ==
	IF kCOLON?(ft(rt(Toks))) THEN
		LET 
			(absy_type, trest) == parseType(rt(rt(Toks)))
		IN
			(SingleArg(value(ft(Toks))!, absy_type), trest)
	ELSE
		(Error("parseSingleArg: ':' or expected"!), skipTo(kCLOSE?, Toks))
	FI

-- parseArgList
FUN parseArgList : absy ** seq[token] -> absy ** seq[token]
DEF parseArgList(argabsy,Toks) ==
	-- IF kCOLON?(ft(Toks)) THEN
	 	-- (argabsy, Toks)
	-- ELSE
		IF id?(ft(Toks)) THEN
			LET
				(absy_single, rest) == parseSingleArg(Toks)
			IN
				IF kCOLON?(ft(rt(rest))) THEN
					(absy_single, rt(skipTo(kCLOSE?, Toks)))
				ELSE
					LET 
						(absy_next, nexrest) == parseArgList(absy_single,rt(rest))
					IN
						(ParamsDecl(absy_single, absy_next), rt(skipTo(kCLOSE?, Toks)))
				FI
		ELSE
			(Error(("parseArgList: identifier expected"!) ++ insteadOf(ft(Toks))), Toks)
		FI
	-- FI

-- skip until token, expects function token? as first argument
-- return: sequence of tokens, where the first token is the expected one or empty sequence
FUN skipTo : (token -> bool) ** seq[token] -> seq[token]
DEF skipTo(EqualsTokFunc, Toks) ==
	IF <>?(Toks) THEN
		Toks
	ELSE
		IF EqualsTokFunc(ft(Toks)) or kEOF?(ft(Toks)) THEN
			Toks
		ELSE
			skipTo(EqualsTokFunc, rt(Toks))
		FI
	FI

-- parseType
FUN parseType : seq[token] -> absy ** seq[token]
DEF parseType(Toks) ==
	IF knat?(ft(Toks)) or kbool?(ft(Toks)) THEN
		IF knat?(ft(Toks)) THEN
			(Type("nat"!), rt(Toks))
		ELSE
			(Type("bool"!), rt(Toks))
		FI
	ELSE
		(Error(("parseType: 'nat' or 'bool' expected"!) ++ insteadOf(ft(Toks))), Toks)
	FI
-- insteadOf
FUN insteadOf : token -> string
DEF insteadOf(Tok) ==
	((" instead of ")!) ++ ((`(Tok))!)

-- just to test the parser from oasys
DEF parsetest(s) ==
	parse(options(false, false, false, s), scantest(s))
-- This is to print the parser-results
DEF `(failure(r)) == `(r)
DEF `(success(r)) == `(r)

